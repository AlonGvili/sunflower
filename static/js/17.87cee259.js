(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./node_modules/_raw-loader@3.1.0@raw-loader/dist/cjs.js!./examples/sunflower-antd-cascade-select/Example2.tsx":function(e,n,t){"use strict";t.r(n),n.default="import React, { useEffect } from 'react';\nimport { Select, Form } from 'antd';\nimport { useCascadeSelect, useFormTable } from 'sunflower-antd';\n\nconst Option = Select.Option;\n\n\nfunction CascadeSelect({ value, search, options, ...props }) {\n  useEffect(() => {\n    if (value && options) {\n      search(value);\n    }\n  }, [value, options]);\n  return <Select value={options && value} {...props}>\n    {\n      options.map(item => <Option value={item.value}>\n        {item.label}\n      </Option>)\n    }\n  </Select> \n}\n\n\n\nexport default Form.create()(props => {\n  const { form } = props;\n  const { selects, search } = useCascadeSelect({\n    form,\n    list: [\n      {\n        name: 'select0',\n        async options() {\n          await new Promise(r => setTimeout(r, 1000));\n          return [{\n            label: 'LILY',\n            value: 'lily',\n          }, {\n            label: 'JACK',\n            value: 'jack',\n          }];\n        }\n      },\n      {\n        name: 'select1',\n        async options(value) {\n          await new Promise(r => setTimeout(r, 1000));\n          return [{\n            label: `${value.toUpperCase()} 1`,\n            value: `${value} 1`,\n          },\n          {\n            label: `${value.toUpperCase()} 2`,\n            value: `${value} 2`,\n          }];\n        },\n      }\n    ],\n  });\n  const [select0, select1] = selects;\n\n  const { formProps } = useFormTable({\n    form,\n    async defaultFormValues() {\n      await new Promise(r => setTimeout(r, 200));\n      return {\n        select0: 'lily',\n      };\n    }\n  });\n\n\n  return <div>\n\n    <Form {...formProps}>\n      <Form.Item\n        label=\"Select0\"\n      >\n        {\n          form.getFieldDecorator('select0')(\n            <CascadeSelect\n              allowClear\n              loading={select0.props.loading}\n              onChange={select0.props.onChange}\n              options={select0.options}\n              search={(val) => { search(1, val) }}\n            />\n          )\n        } \n      </Form.Item>\n\n      <Form.Item\n        label=\"Select1\"\n      >\n       {\n          form.getFieldDecorator('select1')(\n            <Select allowClear {...select1.props}>\n              {\n                select1.options.map(item => <Option key={item.key} value={item.value} >\n                  {item.label}\n                </Option>)\n              }\n            </Select>\n          )\n        } \n      </Form.Item>\n    </Form>\n\n  </div>;\n});\n"}}]);