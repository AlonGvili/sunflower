(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"./node_modules/raw-loader/dist/cjs.js!./examples/sunflower-antd-steps-form/Example1.jsx":function(r,n,e){"use strict";e.r(n),n.default="import React, { Fragment } from 'react';\r\nimport { useStepsForm } from 'sunflower-antd';\r\nimport { Steps, Input, Button, Form, Result, InputNumber, Descriptions } from 'antd';\r\n\r\nconst { Step } = Steps;\r\nconst fieldDecoratorOptions = {\r\n  preserve: true,\r\n}\r\n\r\nexport default Form.create()(props => {\r\n  const { form } = props;\r\n  const {\r\n    current,\r\n    gotoStep,\r\n    stepsProps,\r\n    formProps,\r\n    submit,\r\n  } = useStepsForm({\r\n    async submit({username, email}) {\r\n      console.log('beforeSubmit');\r\n      await new Promise(r => setTimeout(r, 1000));\r\n      console.log('afterSubmit', username, email);\r\n      return 'ok';\r\n    },\r\n    form,\r\n    total: 3,\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    submit()\r\n      .then(result => {\r\n        if (result === 'ok') {\r\n          gotoStep(current + 1)\r\n        }\r\n      })\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        current === 1 && (\r\n          <Descriptions column={1}>\r\n            <Descriptions.Item label=\"current step\">{current}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Username\">{form.getFieldValue('username')}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Email\">{form.getFieldValue('email')}</Descriptions.Item>\r\n          </Descriptions>\r\n        )\r\n      }\r\n      <Steps {...stepsProps}>\r\n        <Step title=\"First Step\" description=\"Input your basic info\" />\r\n        <Step title=\"Second Step\" />\r\n        <Step title=\"Success\" />\r\n      </Steps>\r\n      <Form {...formProps}>\r\n        {\r\n          current === 0 && (\r\n            <Fragment>\r\n              <Form.Item label=\"username\">\r\n                {\r\n                  form.getFieldDecorator('username', {\r\n                    ...fieldDecoratorOptions,\r\n                    rules: [{\r\n                      required: true,\r\n                      message: 'Please input username'\r\n                    }]\r\n                  })(\r\n                    <Input placeholder=\"Username\" />\r\n                  )\r\n                }\r\n              </Form.Item>\r\n              <Form.Item label=\"Email\">\r\n                {\r\n                  form.getFieldDecorator('email', {\r\n                    ...fieldDecoratorOptions,\r\n                    rules: [{\r\n                      required: true,\r\n                      message: 'Please input email',\r\n                      type: 'email'\r\n                    }]\r\n                  })(\r\n                    <Input placeholder=\"Email\" />\r\n                  )\r\n                }\r\n              </Form.Item>\r\n            </Fragment>\r\n          )\r\n        }\r\n        {\r\n          current === 1 && (\r\n            <Form.Item label=\"Price\">\r\n              {\r\n                form.getFieldDecorator('price', {\r\n                  ...fieldDecoratorOptions,\r\n                  rules: [{\r\n                    required: true,\r\n                    message: 'Please input the price',\r\n                    type: 'number',\r\n                    max: 9999,\r\n                    min: 0,\r\n                  }]\r\n                })(\r\n                  <InputNumber\r\n                    formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                  />\r\n                )\r\n              }\r\n            </Form.Item>\r\n          )\r\n        }\r\n      </Form>\r\n      {\r\n        current === 2 && (\r\n          <Result\r\n            status=\"success\"\r\n            title=\"Submit is succeed!\"\r\n            extra={(\r\n              <Fragment>\r\n                <Button type=\"primary\" onClick={() => gotoStep(0)}>buy it again</Button>,\r\n                <Button>check detail</Button>\r\n              </Fragment>\r\n            )}\r\n          />\r\n        )\r\n      }\r\n      {\r\n        current < 1 && <Button onClick={() => gotoStep(current + 1)}>\u4e0b\u4e00\u6b65</Button>\r\n      }\r\n      {\r\n        current === 1 && (\r\n          <Fragment>\r\n            <Button style={{marginRight: 10}} type=\"primary\" onClick={handleSubmit}>\u63d0\u4ea4</Button>\r\n            <Button onClick={() => gotoStep(current - 1)}>\u4e0a\u4e00\u6b65</Button>\r\n          </Fragment>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n});\r\n"}}]);